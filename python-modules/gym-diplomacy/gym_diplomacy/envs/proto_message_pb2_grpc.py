# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import proto_message_pb2 as proto__message__pb2


class GreeterStub(object):
  """*
  It's important that the communication between modules remains as simple as possible.

  In this particular case, all logic regarding converting observation and action into
  arrays is done on the side of BANDANA. Therefore most messages have fields which correspond to numbers.

  The greeting service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SayHello = channel.unary_unary(
        '/dip_q.Greeter/SayHello',
        request_serializer=proto__message__pb2.HelloRequest.SerializeToString,
        response_deserializer=proto__message__pb2.HelloReply.FromString,
        )
    self.SayHelloAgain = channel.unary_unary(
        '/dip_q.Greeter/SayHelloAgain',
        request_serializer=proto__message__pb2.HelloRequest.SerializeToString,
        response_deserializer=proto__message__pb2.HelloReply.FromString,
        )


class GreeterServicer(object):
  """*
  It's important that the communication between modules remains as simple as possible.

  In this particular case, all logic regarding converting observation and action into
  arrays is done on the side of BANDANA. Therefore most messages have fields which correspond to numbers.

  The greeting service definition.
  """

  def SayHello(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SayHelloAgain(self, request, context):
    """Sends another greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SayHello': grpc.unary_unary_rpc_method_handler(
          servicer.SayHello,
          request_deserializer=proto__message__pb2.HelloRequest.FromString,
          response_serializer=proto__message__pb2.HelloReply.SerializeToString,
      ),
      'SayHelloAgain': grpc.unary_unary_rpc_method_handler(
          servicer.SayHelloAgain,
          request_deserializer=proto__message__pb2.HelloRequest.FromString,
          response_serializer=proto__message__pb2.HelloReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'dip_q.Greeter', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
