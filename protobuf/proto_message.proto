syntax = "proto3";

package dip_q;

option java_package = "cruz.agents";

/**
It's important that the communication between modules remains as simple as possible.

In this particular case, all logic regarding converting observation and action into
arrays is done on the side of BANDANA. Therefore most messages have fields which correspond to numbers.
**/


// The greeting service definition.
service DiplomacyGymService {
  // Sends a greeting
  rpc GetAction (BandanaRequest) returns (DiplomacyGymResponse) {}
}

message BandanaRequest {
  enum Type {
    INVALID = 0;
    GET_DEAL_REQUEST = 1; // specific to negotiation scenario
    GET_ACCEPTANCE_REQUEST = 2; // specific to negotiation scenario
    SEND_GAME_END = 3;
  }

  // Using "required" is often bad practice. Generally, the validation
  // should be application-specific in order to make maintenance easier.
  // In proto3 syntax, "optional" is the default field

  Type type = 1;
  ObservationData observation = 2;
}

message DiplomacyGymResponse {
  enum Type {
    INVALID = 0;
    CONFIRM = 1;
    SEND_DEAL = 2;
    SEND_ACCEPTANCE = 3;
  }

  Type type = 1;

  // deal will be null if we're sending an acceptance
  DealData deal = 2;
  
  // acceptance will be null if we're sending a deal 
  AcceptanceData acceptance = 3;
}

message DiplomacyGymOrdersResponse {
  enum Type {
    INVALID = 0;
    VALID = 1;
  }

  Type type = 1;
  OrdersData orders = 2;
}

message ProvinceData {
  // The id of the province, which allows us to map a certain action to a province.
  int32 id = 1;

  // An integer which is the ID of the player owning the province.
  int32 owner = 2;

  // Works like a boolean. 0 if province does not have a supply center (sc). 1 if it does.
  int32 sc = 3;
  
  // An integer which is the ID of the player controlling the province, the owner of the unit in the province.
  int32 unit = 4;
}

message ObservationData {
  // A list of 0 or more provinces.
  repeated ProvinceData provinces = 1;

  // The value of the reward gained by the previous action.
  float previousActionReward = 2;

  // A boolean representing whether a game has finished or not.
  bool done = 3;

  // Arbritary information (mostly for debug purposes).
  string info = 4;

  // ID of the power controlled by the OUR player
  int32 player = 5;
}

message AcceptanceData {
  //TODO
}

message DealData {
  message DefendUnitData {
    // Whether or not the defend deal should be executed
    bool execute = 1;

    // Region to defend
    int32 region = 2;
  }

  message DefendSCData {
    // Whether or not the defend deal should be executed
    bool execute = 1;

    // Province to defend
    int32 province = 2;
  }

  message AttackRegionData {
    // Whether or not the attack deal should be executed
    bool execute = 1;

    // Region to attack
    int32 region = 2;
  }

  message SupportAttackRegionData {
    // Whether or not the support attack deal should be executed
    bool execute = 1;

    // Region to support attack
    int32 region = 2;
  }

  DefendUnitData defendUnit = 1;
  DefendSCData defendSC = 2;
  AttackRegionData attackRegion = 3;
  SupportAttackRegionData supportAttackRegion = 4;

  // How many phases from now should the order be executed
  int32 phasesFromNow = 5;
}

message OrderData {
  int32 start = 1;
  int32 action = 2;
  int32 destination = 3;
}

message OrdersData {
  repeated OrderData orders = 1;
}
